1、
Spring IoC容器至少包含一个bean定义。

2、
实例化容器：
ApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});

BeanFactory factory = context;

3、
使用一个或多个的<import/>元素 来从另外一个或多个文件加载bean定义：
<beans>
    <import resource="services.xml"/>
    <import resource="resources/messageSource.xml"/>
    <import resource="/resources/themeSource.xml"/>

    <bean id="bean1" class="..."/>
    <bean id="bean2" class="..."/>
</beans>

4、
每个bean都有一个或多个id，如果 一个bean有多个id，那么其他的id在本质上将被认为是别名。

5、
bean的别名：<alias name="fromName" alias="toName"/>

6、
实例化bean
（1）用构造器来实例化
<bean id="exampleBean" class="examples.ExampleBean"/>

<bean name="anotherExample" class="examples.ExampleBeanTwo"/>

（2）使用静态工厂方法实例化
<bean id="exampleBean" class="examples.ExampleBean2" factory-method="createInstance"/>

（3）使用实例化工厂方法来实例化
<bean id="serviceLocator" class="com.foo.DefaultServiceLocator">
  <!-- inject any dependencies required by this locator bean -->
</bean>

<bean id="exampleBean" factory-bean="serviceLocator" factory-method="createInstance"/>

7、
依赖注入：
（1）构选器注入：
复杂类型
<beans>
    <bean name="foo" class="x.y.Foo">
        <constructor-arg>
            <bean class="x.y.Bar"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="x.y.Baz"/>
        </constructor-arg>
    </bean>
</beans>
简单类型
<bean id="exampleBean" class="examples.ExampleBean">
  <constructor-arg type="int" value="7500000"/>
  <constructor-arg type="java.lang.String" value="42"/>
</bean>
（2）setter注入

8、
在spring的XML配置中使用<property/>和<constructor-arg/>元素定义。

9、
bean的作用域
  singleton
  prototype
  request
  session
  global session

10、SSH查询条数
int number = ((Long) session.createQuery(hql).iterate().next()).intValue();